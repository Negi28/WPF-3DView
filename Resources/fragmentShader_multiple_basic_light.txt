#version 330 core
out vec4 FragColor;

struct BasicLight {
    vec3 lightPos;
    float ambientStrength;
    float deffuseStrength;
    float specularStrength;
    vec3 lightColor;
};

#define NUM_BASIC_LIGHT 5

uniform vec3 objectColor;
uniform vec3 viewPos;
uniform BasicLight bsLight[NUM_BASIC_LIGHT];

in vec3 Normal;
in vec3 FragPos;

vec3 CalcDirLight(BasicLight light, vec3 normal, vec3 viewDir);

void main()
{
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 result = CalcDirLight(bsLight[0], norm, viewDir);
    for (int i = 1; i < NUM_BASIC_LIGHT; i++)
        result += CalcDirLight(bsLight[i], norm, viewDir);

    result = result * objectColor;
    FragColor = vec4(result, 1.0);
}

vec3 CalcDirLight(BasicLight light, vec3 normal, vec3 viewDir)
{
    //diffuse shading
    vec3 lightDir = normalize(light.lightPos - FragPos);
    float diff = max(dot(normal, lightDir), 0.0);

    //specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);

    //combine results
    return (light.ambientStrength * light.lightColor + light.deffuseStrength * diff * light.lightColor + light.specularStrength * spec * light.lightColor);
}